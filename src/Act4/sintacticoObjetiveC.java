
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 17 14:20:05 GMT-06:00 2025
//----------------------------------------------------

package act4;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 17 14:20:05 GMT-06:00 2025
  */
public class sintacticoObjetiveC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoObjetiveC() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoObjetiveC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoObjetiveC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\003\005" +
    "\000\002\005\003\000\002\005\005\000\002\004\005\000" +
    "\002\004\003\000\002\011\003\000\002\006\006\000\002" +
    "\007\003\000\002\007\005\000\002\010\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\022\004\004\005\014\006\005\007\015\010" +
    "\006\011\017\012\010\013\020\001\002\000\004\045\ufff2" +
    "\001\002\000\004\045\ufff0\001\002\000\004\045\uffee\001" +
    "\002\000\004\002\052\001\002\000\004\045\uffec\001\002" +
    "\000\024\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\001\002\000\024\002\000" +
    "\004\004\005\014\006\005\007\015\010\006\011\017\012" +
    "\010\013\020\001\002\000\004\045\043\001\002\000\004" +
    "\045\ufff1\001\002\000\004\045\uffef\001\002\000\024\002" +
    "\ufffe\004\004\005\014\006\005\007\015\010\006\011\017" +
    "\012\010\013\020\001\002\000\004\045\uffed\001\002\000" +
    "\020\004\004\005\014\006\005\007\015\010\006\011\017" +
    "\012\010\001\002\000\004\045\022\001\002\000\004\103" +
    "\030\001\002\000\004\102\027\001\002\000\006\100\025" +
    "\102\ufff5\001\002\000\004\045\022\001\002\000\004\102" +
    "\ufff4\001\002\000\024\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\001\002\000" +
    "\016\040\033\041\032\046\036\047\035\050\037\051\034" +
    "\001\002\000\006\100\ufff3\102\ufff3\001\002\000\006\100" +
    "\uffe7\102\uffe7\001\002\000\006\100\uffe6\102\uffe6\001\002" +
    "\000\006\100\uffe8\102\uffe8\001\002\000\006\100\uffea\102" +
    "\uffea\001\002\000\006\100\uffeb\102\uffeb\001\002\000\006" +
    "\100\uffe9\102\uffe9\001\002\000\004\002\ufffd\001\002\000" +
    "\006\100\047\102\ufffb\001\002\000\004\102\046\001\002" +
    "\000\010\100\ufff8\102\ufff8\103\044\001\002\000\016\040" +
    "\033\041\032\046\036\047\035\050\037\051\034\001\002" +
    "\000\006\100\ufff9\102\ufff9\001\002\000\024\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\001\002\000\004\045\043\001\002\000\004\102" +
    "\ufffa\001\002\000\004\002\uffff\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\014\002\006\003\011\006\010\011\015\012" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\050\003\011\006\010\011\015\012\012" +
    "\001\001\000\006\004\040\005\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\037\003\011\006\010" +
    "\011\015\012\012\001\001\000\002\001\001\000\004\012" +
    "\020\001\001\000\006\007\022\010\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\025\010\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\040\005\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoObjetiveC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoObjetiveC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoObjetiveC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoObjetiveC$actions {


    public void report_error(String mensaje, Symbol token){
        System.out.println("Error en la linea: " + token.left + 
            ", columna: " + token.right + 
            "-> mensaje->" + mensaje);
    }
    
    public void report_fatal_error(String mensaje, Symbol token){
        report_error(mensaje,token);
        System.exit(1);
    }

  private final sintacticoObjetiveC parser;

  /** Constructor */
  CUP$sintacticoObjetiveC$actions(sintacticoObjetiveC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoObjetiveC$do_action(
    int                        CUP$sintacticoObjetiveC$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoObjetiveC$parser,
    java.util.Stack            CUP$sintacticoObjetiveC$stack,
    int                        CUP$sintacticoObjetiveC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoObjetiveC$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoObjetiveC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= FALSE 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= TRUE 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= CARACTER 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valor ::= CADENA 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valor ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor ::= ENTERO 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("valor",9, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_dato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_dato ::= LONG 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_dato ::= BYTE 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_con ::= IDENTIFICADOR ASIGNACION valor 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_con",6, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_cons ::= dec_con COMA dec_cons 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_cons",5, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_cons ::= dec_con 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_cons",5, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_constantes ::= CONST tipo_dato dec_cons PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_constantes",4, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaraciones_cons ::= dec_constantes 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("declaraciones_cons",7, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_var",2, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_var ::= IDENTIFICADOR ASIGNACION valor 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_var",2, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_vars ::= dec_var COMA dec_vars 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_vars",3, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_vars ::= dec_var 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_vars",3, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_variables ::= tipo_dato dec_vars PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("dec_variables",1, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaraciones_cons declaraciones 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaraciones_cons 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_variables declaraciones 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaraciones ::= dec_variables 
            {
              Object RESULT =null;

              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("declaraciones",0, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          return CUP$sintacticoObjetiveC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaraciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoObjetiveC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.elementAt(CUP$sintacticoObjetiveC$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoObjetiveC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoObjetiveC$parser.done_parsing();
          return CUP$sintacticoObjetiveC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

