/* The following code was generated by JFlex 1.6.1 */

/*
    NOMBRES COMPLETOS ORDENADOS POR PRIMER APELLIDO EN MAYUSCULAS
    BUSTOS LOPEZ ANDRES
    HERNANDEZ TINAJERO LEONARDO MARTIN
    MARTINEZ TOLEDO JESUS JAEL
    OBJETIVE C
*/

package Act2;

import static Act2.Token.Type.*;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Act2/tokens_palabras_reservadas.flex</tt>
 */
public class LexerPalabrasReservadasObjetiveC {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\34\1\60\1\61\1\61\1\60\22\0\1\34\1\45\1\62"+
    "\2\0\1\42\1\46\1\0\1\50\1\51\1\37\1\35\1\56\1\36"+
    "\1\33\1\41\12\32\1\0\1\57\1\43\1\40\1\44\2\0\1\31"+
    "\1\21\11\31\1\23\2\31\1\22\13\31\1\52\1\63\1\53\1\0"+
    "\1\31\1\0\1\3\1\17\1\1\1\15\1\20\1\14\1\13\1\2"+
    "\1\10\1\31\1\27\1\12\1\31\1\11\1\6\2\31\1\4\1\5"+
    "\1\7\1\16\1\25\1\26\1\24\1\30\1\31\1\54\1\47\1\55"+
    "\7\0\1\61\u1fa2\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\23\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\13\2\1\27\1\30\5\2\1\31\11\2\1\0"+
    "\1\32\1\0\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\0\1\41\1\0\13\2\1\42\3\2\1\43\12\2"+
    "\1\44\1\45\1\0\1\46\1\47\1\2\1\50\6\2"+
    "\1\51\1\52\6\2\1\53\1\2\1\54\1\55\1\2"+
    "\1\56\3\2\1\57\3\2\1\60\3\2\1\61\1\2"+
    "\1\62\1\2\1\63\1\2\1\64\1\65\1\66\1\67"+
    "\2\2\1\70\2\2\1\71\1\2\1\72\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\64\0\u0478"+
    "\0\64\0\64\0\64\0\u04ac\0\u04e0\0\64\0\u0514\0\u0548"+
    "\0\u057c\0\u05b0\0\u05e4\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\234"+
    "\0\234\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\64\0\u0bc8\0\u0bfc\0\64\0\64\0\64\0\64"+
    "\0\64\0\u0618\0\64\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\234"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\234\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\234\0\u0b94"+
    "\0\u1144\0\234\0\234\0\u1178\0\234\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\234\0\234\0\u12e4\0\u1318\0\u134c"+
    "\0\u1380\0\u13b4\0\u13e8\0\234\0\u141c\0\234\0\234\0\u1450"+
    "\0\64\0\u1484\0\u14b8\0\u14ec\0\234\0\u1520\0\u1554\0\u1588"+
    "\0\234\0\u15bc\0\u15f0\0\u1624\0\234\0\u1658\0\234\0\u168c"+
    "\0\234\0\u16c0\0\234\0\234\0\234\0\234\0\u16f4\0\u1728"+
    "\0\234\0\u175c\0\u1790\0\234\0\u17c4\0\234\0\234\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\3\4\1\23\1\24\1\4\1\25\1\4"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\30\1\0"+
    "\1\54\1\2\65\0\1\4\1\55\1\56\2\4\1\57"+
    "\24\4\32\0\32\4\32\0\15\4\1\60\14\4\32\0"+
    "\17\4\1\61\12\4\32\0\1\4\1\62\4\4\1\63"+
    "\1\64\15\4\1\65\4\4\32\0\3\4\1\66\26\4"+
    "\32\0\10\4\1\67\2\4\1\70\16\4\32\0\5\4"+
    "\1\71\24\4\32\0\5\4\1\72\24\4\32\0\5\4"+
    "\1\73\24\4\32\0\2\4\1\74\2\4\1\75\3\4"+
    "\1\76\20\4\32\0\5\4\1\77\11\4\1\100\12\4"+
    "\32\0\10\4\1\101\21\4\32\0\3\4\1\102\26\4"+
    "\32\0\11\4\1\103\11\4\1\104\6\4\32\0\21\4"+
    "\1\105\10\4\32\0\5\4\1\106\24\4\32\0\1\4"+
    "\1\107\30\4\32\0\17\4\1\110\12\4\63\0\1\26"+
    "\1\111\64\0\1\30\23\0\1\30\43\0\1\112\62\0"+
    "\1\113\1\0\1\114\62\0\1\115\63\0\1\116\63\0"+
    "\1\117\71\0\1\120\64\0\1\121\14\0\62\122\1\123"+
    "\1\124\1\0\2\4\1\125\27\4\32\0\4\4\1\126"+
    "\25\4\32\0\10\4\1\127\21\4\32\0\6\4\1\130"+
    "\23\4\32\0\6\4\1\131\3\4\1\132\17\4\32\0"+
    "\5\4\1\133\24\4\32\0\2\4\1\134\27\4\32\0"+
    "\12\4\1\135\17\4\32\0\7\4\1\136\22\4\32\0"+
    "\15\4\1\137\14\4\32\0\6\4\1\140\23\4\32\0"+
    "\10\4\1\141\21\4\32\0\6\4\1\142\23\4\32\0"+
    "\11\4\1\143\20\4\32\0\3\4\1\144\26\4\32\0"+
    "\5\4\1\145\24\4\32\0\15\4\1\146\14\4\32\0"+
    "\13\4\1\147\16\4\32\0\4\4\1\150\25\4\32\0"+
    "\17\4\1\151\12\4\32\0\4\4\1\152\25\4\32\0"+
    "\6\4\1\153\23\4\32\0\21\4\1\154\10\4\32\0"+
    "\7\4\1\155\22\4\32\0\7\4\1\156\22\4\32\0"+
    "\4\4\1\157\25\4\63\0\1\160\31\0\37\113\1\161"+
    "\24\113\60\114\2\0\2\114\4\0\1\122\2\0\1\122"+
    "\1\0\1\122\50\0\2\122\1\0\3\4\1\162\26\4"+
    "\32\0\17\4\1\163\12\4\32\0\6\4\1\164\23\4"+
    "\32\0\5\4\1\165\24\4\32\0\15\4\1\166\14\4"+
    "\32\0\7\4\1\167\22\4\32\0\3\4\1\170\26\4"+
    "\32\0\6\4\1\171\23\4\32\0\10\4\1\172\21\4"+
    "\32\0\6\4\1\173\23\4\32\0\17\4\1\157\12\4"+
    "\32\0\12\4\1\174\17\4\32\0\5\4\1\175\24\4"+
    "\32\0\4\4\1\176\25\4\32\0\2\4\1\177\27\4"+
    "\32\0\16\4\1\200\13\4\32\0\2\4\1\201\27\4"+
    "\32\0\7\4\1\202\22\4\32\0\2\4\1\203\27\4"+
    "\32\0\17\4\1\204\12\4\32\0\17\4\1\205\12\4"+
    "\32\0\22\4\1\206\7\4\32\0\14\4\1\207\15\4"+
    "\32\0\11\4\1\210\20\4\31\0\37\113\1\161\1\113"+
    "\1\211\22\113\1\0\7\4\1\212\22\4\32\0\3\4"+
    "\1\213\26\4\32\0\4\4\1\214\25\4\32\0\6\4"+
    "\1\215\23\4\32\0\7\4\1\216\22\4\32\0\17\4"+
    "\1\217\12\4\32\0\1\220\31\4\32\0\17\4\1\71"+
    "\12\4\32\0\6\4\1\221\23\4\32\0\11\4\1\222"+
    "\20\4\32\0\15\4\1\223\14\4\32\0\12\4\1\224"+
    "\17\4\32\0\26\4\1\225\3\4\32\0\3\4\1\226"+
    "\26\4\32\0\17\4\1\227\12\4\32\0\10\4\1\230"+
    "\21\4\32\0\10\4\1\231\21\4\32\0\6\4\1\232"+
    "\23\4\32\0\1\233\31\4\32\0\14\4\1\234\15\4"+
    "\32\0\1\4\1\235\30\4\32\0\17\4\1\236\12\4"+
    "\32\0\11\4\1\237\20\4\32\0\10\4\1\240\21\4"+
    "\32\0\10\4\1\241\21\4\32\0\15\4\1\242\14\4"+
    "\32\0\17\4\1\243\12\4\32\0\6\4\1\244\23\4"+
    "\32\0\17\4\1\245\12\4\32\0\17\4\1\246\12\4"+
    "\32\0\3\4\1\247\26\4\32\0\14\4\1\250\15\4"+
    "\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6136];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\1\1\3\11\2\1\1\11"+
    "\5\1\10\11\35\1\1\0\1\11\1\0\1\1\5\11"+
    "\1\0\1\11\1\0\34\1\1\0\27\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerPalabrasReservadasObjetiveC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> ERROR Token no reconocido");
            }
          case 61: break;
          case 2: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Identificador ");
                return new Token(IDENTIFICADOR,yytext(),(yyline+1),(yycolumn+1));
            }
          case 62: break;
          case 3: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Numero entero ");
                return new Token(ENTERO,yytext(),(yyline+1),(yycolumn+1));
            }
          case 63: break;
          case 4: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto ");
                return new Token(PUNTO, yytext(), (yyline+1), (yycolumn+1));
            }
          case 64: break;
          case 5: 
            { /* Ignorar espacios en blanco */
            }
          case 65: break;
          case 6: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Operador suma ");
                return new Token(SUMA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 66: break;
          case 7: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Operador resta ");
                return new Token(RESTA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 67: break;
          case 8: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Operador multiplicacion ");
                return new Token(MULTIPLICACION, yytext(), (yyline+1), (yycolumn+1));
            }
          case 68: break;
          case 9: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> operador de resultado ");
                return new Token(RESULTADO,yytext(),(yyline+1),(yycolumn+1));
            }
          case 69: break;
          case 10: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Operador division ");
                return new Token(DIVISION, yytext(), (yyline+1), (yycolumn+1));
            }
          case 70: break;
          case 11: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Operador modulo ");
                return new Token(MODULO, yytext(), (yyline+1), (yycolumn+1));
            }
          case 71: break;
          case 12: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador menor que ");
                return new Token(MENOR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 72: break;
          case 13: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador mayor que ");
                return new Token(MAYOR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 73: break;
          case 14: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador logico NOT ");
                return new Token(NOT, yytext(), (yyline+1), (yycolumn+1));
            }
          case 74: break;
          case 15: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis izquierdo ");
                return new Token(PAR_IZQ, yytext(), (yyline+1), (yycolumn+1));
            }
          case 75: break;
          case 16: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis derecho ");
                return new Token(PAR_DER, yytext(), (yyline+1), (yycolumn+1));
            }
          case 76: break;
          case 17: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete izquierdo ");
                return new Token(COR_IZQ, yytext(), (yyline+1), (yycolumn+1));
            }
          case 77: break;
          case 18: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete derecho ");
                return new Token(COR_DER, yytext(), (yyline+1), (yycolumn+1));
            }
          case 78: break;
          case 19: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave izquierda ");
                return new Token(LLAVE_IZQ, yytext(), (yyline+1), (yycolumn+1));
            }
          case 79: break;
          case 20: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave derecha ");
                return new Token(LLAVE_DER, yytext(), (yyline+1), (yycolumn+1));
            }
          case 80: break;
          case 21: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Coma ");
                return new Token(COMA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 81: break;
          case 22: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto y coma ");
                return new Token(PUNTOYCOMA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 82: break;
          case 23: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Estructura condicional IF ");
                return new Token(IF,yytext(),(yyline+1),(yycolumn+1));
            }
          case 83: break;
          case 24: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> identificador booleano false ");
                return new Token(FALSE,yytext(),(yyline+1),(yycolumn+1));
            }
          case 84: break;
          case 25: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Ciclo DO-WHILE ");
                return new Token(DO,yytext(),(yyline+1),(yycolumn+1));
            }
          case 85: break;
          case 26: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador igual que ");
                return new Token(IGUAL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 86: break;
          case 27: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Comentario de una linea");
                return new Token(COMENTARIO_LINEA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 87: break;
          case 28: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador menor o igual ");
                return new Token(MENORIGUAL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 88: break;
          case 29: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador mayor o igual ");
                return new Token(MAYORIGUAL, yytext(), (yyline+1), (yycolumn+1));
            }
          case 89: break;
          case 30: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador diferente ");
                return new Token(DIFERENTE, yytext(), (yyline+1), (yycolumn+1));
            }
          case 90: break;
          case 31: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador logico AND ");
                return new Token(AND, yytext(), (yyline+1), (yycolumn+1));
            }
          case 91: break;
          case 32: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Operador logico OR ");
                return new Token(OR, yytext(), (yyline+1), (yycolumn+1));
            }
          case 92: break;
          case 33: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Cadena de texto");
                return new Token(CADENA, yytext(), (yyline+1), (yycolumn+1));
            }
          case 93: break;
          case 34: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato entero ");
                return new Token(INT,yytext(),(yyline+1),(yycolumn+1));
            }
          case 94: break;
          case 35: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Ciclo FOR ");
                return new Token(FOR,yytext(),(yyline+1),(yycolumn+1));
            }
          case 95: break;
          case 36: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> identificador booleano false ");
                return new Token(TRUE,yytext(),(yyline+1),(yycolumn+1));
            }
          case 96: break;
          case 37: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> Numero flotante ");
                return new Token(FLOTANTE,yytext(),(yyline+1),(yycolumn+1));
            }
          case 97: break;
          case 38: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato caracter ");
                return new Token(CHAR,yytext(),(yyline+1),(yycolumn+1));
            }
          case 98: break;
          case 39: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Caso en SWITCH ");
                return new Token(CASE,yytext(),(yyline+1),(yycolumn+1));
            }
          case 99: break;
          case 40: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Variable de almacenamiento automatico ");
                return new Token(AUTO,yytext(),(yyline+1),(yycolumn+1));
            }
          case 100: break;
          case 41: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato entero largo ");
                return new Token(LONG, yytext(),(yyline+1),(yycolumn+1));
            }
          case 101: break;
          case 42: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Salto incondicional GOTO ");
                return new Token(GOTO,yytext(),(yyline+1),(yycolumn+1));
            }
          case 102: break;
          case 43: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Estructura condicional ELSE ");
                return new Token(ELSE,yytext(),(yyline+1),(yycolumn+1));
            }
          case 103: break;
          case 44: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t"); 
                System.out.println(yytext()+" -> tipo de dato booleano");
                return new Token(BOOL,yytext(),(yyline+1),(yycolumn+1));
            }
          case 104: break;
          case 45: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Variable o funcion externa ");
                return new Token(VOID,yytext(),(yyline+1),(yycolumn+1));
            }
          case 105: break;
          case 46: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Comentario de multiples lineas");
                return new Token(COMENTARIO_MULTI, yytext(), (yyline+1), (yycolumn+1));
            }
          case 106: break;
          case 47: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato entero corto ");
                return new Token(SHORT,yytext(),(yyline+1),(yycolumn+1));
            }
          case 107: break;
          case 48: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato decimal ");
                return new Token(FLOAT,yytext(),(yyline+1),(yycolumn+1));
            }
          case 108: break;
          case 49: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Interrupción de ciclo o switch ");
                return new Token(BREAK,yytext(),(yyline+1),(yycolumn+1));
            }
          case 109: break;
          case 50: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Ciclo WHILE ");
                return new Token(WHILE,yytext(),(yyline+1),(yycolumn+1));
            }
          case 110: break;
          case 51: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Retorno de funcion ");
                return new Token(RETURN,yytext(),(yyline+1),(yycolumn+1));
            }
          case 111: break;
          case 52: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Variable estatica ");
                return new Token(STATIC,yytext(),(yyline+1),(yycolumn+1));
            }
          case 112: break;
          case 53: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Modificador de signo (positivo/negativo) ");
                return new Token(SIGNED,yytext(),(yyline+1),(yycolumn+1));
            }
          case 113: break;
          case 54: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Estructura SWITCH ");
                return new Token(SWITCH,yytext(),(yyline+1),(yycolumn+1));
            }
          case 114: break;
          case 55: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato decimal doble precision ");
                return new Token(DOUBLE,yytext(),(yyline+1),(yycolumn+1));
            }
          case 115: break;
          case 56: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Variable o funcion externa ");
                return new Token(EXTERN,yytext(),(yyline+1),(yycolumn+1));
            }
          case 116: break;
          case 57: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Caso DEFAULT en SWITCH ");
                return new Token(DEFAULT,yytext(),(yyline+1),(yycolumn+1));
            }
          case 117: break;
          case 58: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Salto a siguiente iteracion ");
                return new Token(CONTINUE,yytext(),(yyline+1),(yycolumn+1));
            }
          case 118: break;
          case 59: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Variable sugerida para registro ");
                return new Token(REGISTER,yytext(),(yyline+1),(yycolumn+1));
            }
          case 119: break;
          case 60: 
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Modificador sin signo ");
                return new Token(UNSIGNED,yytext(),(yyline+1),(yycolumn+1));
            }
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
